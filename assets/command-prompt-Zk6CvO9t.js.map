{"version":3,"mappings":"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","names":["COMMAND_MODULES_CACHE","PUBLIC_COMMANDS","COMMAND_ALIASES","BUILTIN_COMMAND_MODULES","RX_COMMAND","getCommandModule","command","module","__variableDynamicImportRuntimeHelper","COMMAND_HISTORY_STORAGE_KEY","CommandHistory","history","QUOTES","unquote","input","i","quote","RX_PARTIAL","RX_OPTION_PREFIX","RX_SINGLE_CHAR_OPTION_WITH_VALUE","RX_SINGLE_CHAR_OPTIONS","RX_OPTION","parseParameters","parsedParameters","partials","match","partial","chars","j","option","value","COMMAND_IN_PROGRESS_CLASSNAME","ID_COUNTER","CommandPrompt","event","content","error","type","outputElement","commandLength","parameters","parametersString","handler"],"sources":["../../src/components/command-prompt/commands.ts","../../src/components/command-prompt/lib/command-history.ts","../../src/components/command-prompt/lib/unquote.ts","../../src/components/command-prompt/lib/parse-parameters.ts","../../src/components/command-prompt/command-prompt.ts"],"sourcesContent":["import { CommandModule } from './command-prompt.types';\n\nconst COMMAND_MODULES_CACHE = new Map<string, CommandModule>();\n\n/**\n * these commands will show up in public listings like `commands`\n */\nexport const PUBLIC_COMMANDS = [\n  'clear',\n  'color-theme',\n  'colors',\n  'commands',\n  'echo',\n  'hello',\n  'help',\n  'man',\n  'maximize',\n  'minimize',\n  'reload',\n  'type',\n  'version'\n];\n\n/**\n * aliases for commands\n */\nexport const COMMAND_ALIASES: { [alias: string]: string } = {\n  cls: 'clear',\n  hey: 'hello',\n  hi: 'hello',\n  max: 'maximize',\n  min: 'minimize',\n  print: 'echo',\n  theme: 'color-theme'\n};\n\n/**\n * builtin commands are not lazy-loaded\n */\nconst BUILTIN_COMMAND_MODULES: { [command: string]: CommandModule } = {\n  foo: { handler: 'bar' },\n  test: { handler: 'test passed.' }\n};\n\n/**\n * regexp for valid command names\n */\nconst RX_COMMAND = /^[a-z][\\da-z]*(-[a-z][\\da-z]*)*$/i;\n\n/**\n * return a command module for a command name\n * - from builtin modules\n * - from cached modules\n * - try to load and import the module\n */\nexport async function getCommandModule(command: string): Promise<CommandModule> {\n  if (!RX_COMMAND.test(command)) {\n    throw new Error(`invalid command: ${command}`);\n  }\n  command = command.toLowerCase();\n  command = COMMAND_ALIASES[command] || command;\n  if (BUILTIN_COMMAND_MODULES[command]) {\n    return BUILTIN_COMMAND_MODULES[command];\n  }\n  if (!COMMAND_MODULES_CACHE.has(command)) {\n    let module: CommandModule;\n    try {\n      module = (await import(`./command-modules/${command}.ts`)).default;\n    } catch {\n      throw new Error(`unknown command: ${command}`);\n    }\n    COMMAND_MODULES_CACHE.set(command, module);\n  }\n  return COMMAND_MODULES_CACHE.get(command) as CommandModule;\n}\n","const COMMAND_HISTORY_STORAGE_KEY = 'command-history';\n\nexport class CommandHistory {\n  private readonly history: string[];\n  private index = -1;\n\n  constructor() {\n    let history: string[];\n    try {\n      history = JSON.parse(window.localStorage.getItem(COMMAND_HISTORY_STORAGE_KEY) || '[]');\n    } catch {\n      history = [];\n    }\n    this.history = Array.isArray(history) ? history : [];\n  }\n\n  public add(command: string): void {\n    this.index = -1;\n    command = command.trim();\n    if (this.history[0] !== command) {\n      this.history.unshift(command);\n      window.localStorage.setItem(COMMAND_HISTORY_STORAGE_KEY, JSON.stringify(this.history));\n    }\n  }\n\n  public backward(): string | undefined {\n    if (this.index + 1 < this.history.length) {\n      this.index++;\n      return this.history[this.index];\n    }\n  }\n\n  public forward(): string | undefined {\n    if (this.index - 1 >= -1) {\n      this.index--;\n      return this.index === -1 ? '' : this.history[this.index];\n    }\n  }\n}\n","const QUOTES = ['\"', \"'\"];\n\nexport function unquote(input: string): string {\n  for (let i = 0; i < QUOTES.length; i++) {\n    const quote = QUOTES[i];\n    if (input.at(0) === quote && input.at(-1) === quote) {\n      return input.slice(1, -1).replaceAll(new RegExp(`\\\\\\\\${quote}`, 'g'), quote);\n    }\n  }\n  return input;\n}\n","import { unquote } from './unquote';\n\nexport interface ParsedParametersOptions {\n  [key: string]: boolean | string;\n}\n\nexport interface ParsedParameters {\n  inputs: string[];\n  options: ParsedParametersOptions;\n}\n\nconst RX_PARTIAL = /^(--?[^\\s\"']+=)?(\"(\\\\\"|[^\"])*\"|'(\\\\'|[^'])*'|\\S+)/;\nconst RX_OPTION_PREFIX = /^--?\\S/;\nconst RX_SINGLE_CHAR_OPTION_WITH_VALUE = /^-[a-z]=/i;\nconst RX_SINGLE_CHAR_OPTIONS = /^-[a-z]+$/i;\nconst RX_OPTION = /^--[a-z][\\da-z]*([_-][a-z][\\da-z]*)*/i;\n\nexport function parseParameters(input: string): ParsedParameters {\n  input = input.trim();\n  const parsedParameters: ParsedParameters = { inputs: [], options: {} };\n  const partials: string[] = [];\n  let match: RegExpMatchArray | null = null;\n  while (input.length > 0) {\n    const partial = (match = input.match(RX_PARTIAL)) === null ? input : match[0];\n    partials.push(partial);\n    input = input.slice(partial.length).trim();\n  }\n  for (let i = 0; i < partials.length; i++) {\n    const partial = partials[i].trim();\n    if (RX_OPTION_PREFIX.test(partial)) {\n      if ((match = partial.match(RX_SINGLE_CHAR_OPTION_WITH_VALUE))) {\n        parsedParameters.options[partial.charAt(1).toLowerCase()] = unquote(partial.slice(3));\n      } else if ((match = partial.match(RX_SINGLE_CHAR_OPTIONS))) {\n        const chars = [...match[0].slice(1).toLowerCase()];\n        for (let j = 0; j < chars.length; j++) {\n          parsedParameters.options[chars[j]] = true;\n        }\n      } else if ((match = partial.match(RX_OPTION))) {\n        const option = partial.slice(2, match[0].length).toLowerCase();\n        const value = partial.charAt(match[0].length) === '=' ? unquote(partial.slice(match[0].length + 1)) : true;\n        parsedParameters.options[option] = value;\n      }\n    } else {\n      parsedParameters.inputs.push(unquote(partial));\n    }\n  }\n  return parsedParameters;\n}\n","import './command-prompt.scss';\n\nimport { CommandOutput } from './command-prompt.types';\nimport { getCommandModule } from './commands';\nimport { CommandHistory } from './lib/command-history';\nimport { parseParameters } from './lib/parse-parameters';\n\nconst COMMAND_IN_PROGRESS_CLASSNAME = 'command-in-progress';\n\nlet ID_COUNTER = 0;\n\nexport class CommandPrompt extends HTMLElement {\n  private readonly outputsElement = document.createElement('div');\n  private readonly promptElement = document.createElement('div');\n  private readonly labelElement = document.createElement('label');\n  private readonly inputElement = document.createElement('input');\n  private readonly history = new CommandHistory();\n  private readonly inputId = `prompt-input${++ID_COUNTER}`;\n\n  public constructor() {\n    super();\n  }\n\n  public connectedCallback(): void {\n    this.outputsElement.classList.add('outputs');\n    this.promptElement.classList.add('prompt');\n    this.labelElement.classList.add('prompt-label');\n    this.labelElement.setAttribute('for', this.inputId);\n\n    this.inputElement.classList.add('prompt-input');\n    this.inputElement.id = this.inputId;\n    this.inputElement.type = 'text';\n    this.inputElement.addEventListener('keypress', event => this.onPromptKeyPress(event));\n    this.inputElement.addEventListener('keydown', event => this.onPromptKeyDown(event));\n\n    this.append(this.outputsElement);\n    this.promptElement.append(this.labelElement);\n    this.promptElement.append(this.inputElement);\n    this.append(this.promptElement);\n  }\n\n  public outputText(content: string) {\n    this.addOutput({ type: 'text', content });\n  }\n\n  public outputError(error: Error | string) {\n    this.addOutput({ type: 'error', content: `${(error as Error).message || error}` });\n  }\n\n  public clearOutput() {\n    this.outputsElement.innerHTML = '';\n  }\n\n  public get commandIsInProgress(): boolean {\n    return this.classList.contains(COMMAND_IN_PROGRESS_CLASSNAME);\n  }\n\n  private addOutput({ type, content }: CommandOutput): void {\n    const outputElement = document.createElement('div');\n    outputElement.classList.add('output', `is-${type}`);\n    if (type === 'text') outputElement.innerHTML = content;\n    else if (type === 'command') {\n      const command = document.createElement('span');\n      command.classList.add('command-input');\n      command.textContent = content;\n      outputElement.append(command);\n    } else outputElement.textContent = content;\n    this.outputsElement.append(outputElement);\n    this.inputElement.scrollIntoView();\n  }\n\n  private onPromptKeyPress(event: KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (!this.commandIsInProgress) {\n        const command = this.inputElement.value;\n        this.inputElement.value = '';\n        this.parseInput(command);\n      }\n    }\n  }\n\n  private onPromptKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n      let command: string | undefined;\n      if (event.key === 'ArrowUp') {\n        command = this.history.backward();\n      } else if (event.key === 'ArrowDown') {\n        command = this.history.forward();\n      }\n      if (typeof command === 'string') {\n        event.preventDefault();\n        this.inputElement.value = command;\n      }\n    }\n  }\n\n  private parseInput(input: string): void {\n    input = input.trim();\n    let commandLength = input.search(/\\s|$/);\n    commandLength = commandLength > 0 ? commandLength : input.length;\n    const command = input.slice(0, commandLength);\n    if (command.length === 0) return;\n    const parameters = input.slice(commandLength).trim();\n    this.onCommandStart(input);\n    this.runCommand(command, parameters)\n      .catch(error => this.outputError(error))\n      .finally(() => this.onCommandEnd());\n  }\n\n  private async runCommand(command: string, parametersString: string): Promise<void> {\n    const { handler } = await getCommandModule(command);\n    if (typeof handler === 'string') return this.outputText(handler);\n    const parameters = parseParameters(parametersString);\n    return handler(this, parameters);\n  }\n\n  private onCommandStart(input: string): void {\n    this.addOutput({ type: 'command', content: `${input}` });\n    this.history.add(input);\n    this.classList.add(COMMAND_IN_PROGRESS_CLASSNAME);\n  }\n\n  private onCommandEnd(): void {\n    this.classList.remove(COMMAND_IN_PROGRESS_CLASSNAME);\n  }\n}\n"],"file":"assets/command-prompt-Zk6CvO9t.js"}